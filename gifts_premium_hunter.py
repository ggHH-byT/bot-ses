import asyncio, os, re, json, logging, signal, random
from pathlib import Path

from dotenv import load_dotenv
from pyrogram import Client
from playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError

# ---------------------- –ö–æ–Ω—Ñ–∏–≥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ----------------------
load_dotenv()

API_ID = int(os.getenv("TG_API_ID", "0"))
API_HASH = os.getenv("TG_API_HASH", "")
SESSION_NAME = os.getenv("SESSION_NAME", "pyro_user")

CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "60"))
MAX_BUYS_PER_CYCLE = int(os.getenv("MAX_BUYS_PER_CYCLE", "5"))
NEW_NOTIFY_LIMIT = int(os.getenv("NEW_NOTIFY_LIMIT", "20"))
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
PREMIUM_WORDS = [w.strip().lower() for w in os.getenv("PREMIUM_WORDS", "premium,–ø—Ä–µ–º–∏—É–º").split(",")]
PROXY_SERVER = os.getenv("PROXY_SERVER")  # –ø—Ä–∏–º–µ—Ä: http://user:pass@host:port

STORAGE = "tg_storage_state.json"      # —Å–µ—Å—Å–∏—è Telegram Web (Playwright)
BOUGHT_FILE = Path("bought_titles.json")  # —á—Ç–æ —É–∂–µ –∫—É–ø–∏–ª–∏
SEEN_FILE = Path("seen_gifts.json")       # —á—Ç–æ —É–∂–µ –≤–∏–¥–µ–ª–∏ (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö)

logging.basicConfig(level=getattr(logging, LOG_LEVEL, logging.INFO),
                    format="%(asctime)s %(levelname)s: %(message)s")
LOG = logging.getLogger("gifts")

# Telegram Web –≤–∞—Ä–∏–∞–Ω—Ç—ã (–∏–Ω–æ–≥–¥–∞ –ª–æ–º–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –≤–µ—Ç–∫–∞)
TG_WEB_URLS = [
    "https://web.telegram.org/k/",
    "https://web.telegram.org/a/",
    "https://web.telegram.org/z/",
]
USER_AGENT = ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
              "AppleWebKit/537.36 (KHTML, like Gecko) "
              "Chrome/123.0.0.0 Safari/537.36")
GIFT_ENTRY_URL = "https://t.me/gifts"

# ---------------------- –°–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ –º–∏–Ω–∏‚Äë–∞–ø–ø–µ ----------------------
ENTRY_SEND_GIFT = "button:has-text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫'), button:has-text('Send a gift')"
ENTRY_SEND_TO_SELF = "button:has-text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–±–µ'), button:has-text('Send to myself')"
ALL_TAB = "button:has-text('–í—Å–µ –ø–æ–¥–∞—Ä–∫–∏'), button:has-text('All gifts')"

CARD_ITEM = "[data-test-id='gift-card'], .gift-card, [class*='giftCard'], [class*='GiftCard']"
CARD_TITLE = ".title, [data-test-id='gift-title'], [class*='Title']"
CARD_BADGE = ".badge, .label, [data-test-id='gift-badge'], [class*='Badge']"
CARD_FRAME = ".card, .frame, .container, [class*='card']"

BUY_BTN_LIST = ("button:has-text('–ö—É–ø–∏—Ç—å'), button:has-text('Buy'), "
                "button:has-text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å'), button:has-text('Send')")
CONFIRM_BUY_BTN = ("button:has-text('–û–¢–ü–†–ê–í–ò–¢–¨ –ü–û–î–ê–†–û–ö'), "
                   "button:has-text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫'), button:has-text('Send gift')")

# ---------------------- –£—Ç–∏–ª—å –¥–ª—è set —Ñ–∞–π–ª–æ–≤ ----------------------
def load_set(path: Path) -> set:
    if path.exists():
        try:
            return set(json.loads(path.read_text("utf-8")))
        except Exception:
            return set()
    return set()

def save_set(path: Path, s: set):
    path.write_text(json.dumps(sorted(s), ensure_ascii=False), encoding="utf-8")

# ---------------------- –õ–æ–≥–∏–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞ ----------------------
def looks_premium(title: str, badge: str) -> bool:
    t = (title or "").lower()
    b = (badge or "").lower()
    return any(w in t for w in PREMIUM_WORDS) or any(w in b for w in PREMIUM_WORDS)

async def has_colored_border(card) -> bool:
    """–≠–≤—Ä–∏—Å—Ç–∏–∫–∞ ¬´—Ü–≤–µ—Ç–Ω–æ–π –æ–±–≤–æ–¥–∫–∏¬ª: —Ä–∞–º–∫–∞/—Ç–µ–Ω—å –Ω–µ —Å–µ—Ä–æ–≥–æ —Ç–æ–Ω–∞."""
    try:
        elem = card.locator(CARD_FRAME).first
        if await elem.count() == 0:
            elem = card
        color = await elem.evaluate("""(el)=>{
            const s = getComputedStyle(el);
            return (s.borderColor || s.outlineColor || s.boxShadow || '').toString();
        }""")
        if not color:
            return False
        color = color.lower()
        if "transparent" in color or color.strip() == "none":
            return False
        m = re.search(r"rgb\(\s*(\d+),\s*(\d+),\s*(\d+)\s*\)", color)
        if m:
            r, g, b = map(int, m.groups())
            # –Ω–µ –ø–æ—á—Ç–∏ —Å–µ—Ä—ã–π (r‚âàg‚âàb)
            return not (abs(r-g) < 8 and abs(g-b) < 8 and abs(r-b) < 8)
        # –µ—Å–ª–∏ –Ω–µ—Ç rgb ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ¬´—Ü–≤–µ—Ç–Ω–æ–µ¬ª
        return True
    except:
        return False

# ---------------------- Playwright-—à–∞–≥–∏ ----------------------
async def ensure_login(context):
    page = await context.new_page()
    try:
        loaded = False
        # 1: –ø—Ä–æ–±—É–µ–º –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        for url in TG_WEB_URLS:
            try:
                await page.goto(url, wait_until="networkidle", timeout=60000)
                loaded = True
                break
            except Exception:
                continue
        # 2: fallback ‚Äî –ø–æ–¥–ª–∏–Ω–Ω–µ–µ —Ç–∞–π–º–∞—É—Ç –∏ domcontentloaded
        if not loaded:
            for url in TG_WEB_URLS:
                try:
                    await page.goto(url, wait_until="domcontentloaded", timeout=90000)
                    try:
                        await page.wait_for_selector("div,button,input", timeout=15000)
                    except Exception:
                        pass
                    loaded = True
                    break
                except Exception:
                    continue
        if not loaded:
            raise RuntimeError("Telegram Web –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –≤—Å–µ–º URL")

        if "login" in page.url or "auth" in page.url:
            LOG.info("–í—ã–ø–æ–ª–Ω–∏ –≤—Ö–æ–¥ –≤ Telegram Web (QR/–∫–æ–¥). –ñ–¥—É‚Ä¶")
            await page.wait_for_url(re.compile(r".*/(k|a|z)/.*"), timeout=0)
            await context.storage_state(path=STORAGE)
            LOG.info("–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    finally:
        await page.close()

async def open_gifts_webapp(page):
    await page.goto(GIFT_ENTRY_URL, wait_until="domcontentloaded", timeout=90000)
    for text in ("Open", "–û—Ç–∫—Ä—ã—Ç—å"):
        try:
            await page.get_by_text(text).click(timeout=5000)
            break
        except:
            pass
    await page.wait_for_timeout(1500)
    frames = [f for f in page.frames if f != page.main_frame]
    return frames[-1] if frames else page.main_frame

async def enter_catalog(webview):
    try:
        if await webview.locator(ENTRY_SEND_GIFT).count():
            await webview.locator(ENTRY_SEND_GIFT).first.click()
            await webview.wait_for_timeout(350)
    except:
        pass
    try:
        if await webview.locator(ENTRY_SEND_TO_SELF).count():
            await webview.locator(ENTRY_SEND_TO_SELF).first.click()
            await webview.wait_for_timeout(500)
    except:
        pass

async def refresh_app(webview):
    try:
        if await webview.locator(ALL_TAB).count():
            await webview.locator(ALL_TAB).first.click()
            await webview.wait_for_timeout(350)
    except:
        pass

async def scan_and_buy(webview, bought_titles: set, seen_gifts: set,
                       max_buys: int, pyro: Client) -> int:
    """–°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥: —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö, –ø–æ–∫—É–ø–∞–µ–º –ø—Ä–µ–º–∏—É–º."""
    buys = 0
    new_notified = 0

    cards = await webview.locator(CARD_ITEM).all()
cards_count = len(cards)

if cards_count == 0:
    LOG.warning("‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω–µ = 0 ‚Äî —Å–æ—Ö—Ä–∞–Ω—è—é —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏...")
    await webview.screenshot(path="debug_no_cards.png", full_page=True)
    html_content = await webview.content()
    with open("debug_no_cards.html", "w", encoding="utf-8") as f:
        f.write(html_content)
    LOG.info("üíæ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: debug_no_cards.png –∏ debug_no_cards.html")

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫
    await asyncio.sleep(3)
    cards = await webview.locator(CARD_ITEM).all()
    cards_count = len(cards)

LOG.info("–ö–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω–µ: %d", cards_count)


    for card in cards:
        title = badge = ""
        try:
            if await card.locator(CARD_TITLE).count():
                title = (await card.locator(CARD_TITLE).first.inner_text()).strip()
            if await card.locator(CARD_BADGE).count():
                badge = (await card.locator(CARD_BADGE).first.inner_text()).strip()
        except:
            pass

        # —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫–ª—é—á
        try:
            html_snip = await card.evaluate("(e)=>e.outerHTML")
        except:
            html_snip = ""
        key = title or f"html:{html_snip.strip()[:96]}"

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ù–û–í–´–• –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        if key not in seen_gifts and new_notified < NEW_NOTIFY_LIMIT:
            try:
                await pyro.send_message("me", f"üÜï –ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫: {title or '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)'}")
            except Exception as e:
                LOG.warning("–ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–¥–∞—Ä–∫–µ: %s", e)
            seen_gifts.add(key)
            save_set(SEEN_FILE, seen_gifts)
            new_notified += 1

        # –¥–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–µ–º–∏—É–º–∞
        is_premium = looks_premium(title, badge)
        if not is_premium:
            is_premium = await has_colored_border(card)
        if not is_premium:
            continue

        if key in bought_titles:
            continue

        LOG.info("üîé –ü—Ä–µ–º–∏—É–º: %r / %r", title, badge)

        # –ø–æ–∫—É–ø–∫–∞
        try:
            await card.click()
            await webview.locator(BUY_BTN_LIST).first.click(timeout=5000)

            btn = webview.locator(CONFIRM_BUY_BTN).first
            await btn.wait_for(timeout=6000)
            price_txt = (await btn.inner_text()).strip()
            await btn.click()

            LOG.info("‚úÖ –ö—É–ø–ª–µ–Ω–æ: %s (%s)", title or key, price_txt)
            bought_titles.add(key)
            save_set(BOUGHT_FILE, bought_titles)

            try:
                await pyro.send_message("me", f"‚úÖ –ö—É–ø–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫: {title or key} {('('+price_txt+')') if price_txt else ''}")
            except Exception as e:
                LOG.warning("–ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ': %s", e)

            buys += 1
            if buys >= max_buys:
                break
            await asyncio.sleep(1.0 + random.random()*0.7)

        except Exception as e:
            LOG.warning("–ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: %s", e)
            # –ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏ —Å–∫–∞–Ω–∏—Ç—å –¥–∞–ª—å—à–µ
            try:
                await webview.go_back()
            except:
                pass

    return buys

# ---------------------- –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ----------------------
async def run():
    # Pyrogram ‚Äî –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å –ø—Ä–æ—Ü–µ—Å—Å–∞
    pyro = Client(
        name=SESSION_NAME,
        api_id=API_ID,
        api_hash=API_HASH,
        workdir=".",  # —Å–µ—Å—Å–∏—è –±—É–¥–µ—Ç pyro_user.session –≤ —Ç–µ–∫—É—â–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ
        no_updates=True
    )
    await pyro.start()  # —Å–ø—Ä–æ—Å–∏—Ç –∫–æ–¥/2FA –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ

    bought_titles = load_set(BOUGHT_FILE)
    seen_gifts = load_set(SEEN_FILE)

    while True:
        try:
            async with async_playwright() as p:
                launch_kwargs = {
                    "headless": True,
                    "args": [
                        "--no-sandbox",
                        "--disable-dev-shm-usage",
                        "--disable-gpu",
                        "--disable-blink-features=AutomationControlled",
                    ],
                }
                if PROXY_SERVER:
                    launch_kwargs["proxy"] = {"server": PROXY_SERVER}

                browser = await p.chromium.launch(**launch_kwargs)

                context_kwargs = {
                    "storage_state": STORAGE if Path(STORAGE).exists() else None,
                    "user_agent": USER_AGENT,
                    "viewport": {"width": 1366, "height": 768},
                }
                # proxy –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:
                # if PROXY_SERVER:
                #     context_kwargs["proxy"] = {"server": PROXY_SERVER}

                context = await browser.new_context(**context_kwargs)

                try:
                    await ensure_login(context)
                    page = await context.new_page()

                    try:
                        webview = await open_gifts_webapp(page)
                        await enter_catalog(webview)
                        await refresh_app(webview)
                        await scan_and_buy(webview, bought_titles, seen_gifts, MAX_BUYS_PER_CYCLE, pyro)
                    finally:
                        await page.close()

                finally:
                    await context.close()
                    await browser.close()

        except PlaywrightTimeoutError:
            LOG.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Telegram Web, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ %s —Å–µ–∫.", CHECK_INTERVAL)
        except Exception as e:
            LOG.error("–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: %s", e)

        await asyncio.sleep(CHECK_INTERVAL)

def main():
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    for sig in (signal.SIGINT, signal.SIGTERM):
        signal.signal(sig, signal.SIG_DFL)
    asyncio.run(run())

if __name__ == "__main__":
    main()

